package service

import (
	"bytes"
	"crypto/aes"
	"crypto/cipher"
	"crypto/sha256"
	"didSample/key"
	"didSample/model"
	"didSample/util"
	"didSample/util/base58"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"os"
)

func GenerateDID() (*model.DidInfo, *model.DocumentInfo) {
	// 1. KeyPair 생성
	didStr := "did:method:spec"
	keyPair := key.GenerateKeyPair("UID")
	fmt.Println(keyPair)

	holder := &model.DidInfo{
		PrvKey:  keyPair.PrvKey,
		PubKey:  keyPair.PubKey,
		Created: util.GetCurrentDate(),
	}

	//2.generate DID string
	//2-1. AES Encrypt PublicKey
	mk := []byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f} //32byte

	iv := []byte{0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff} //16

	block, err := aes.NewCipher(mk)
	if err != nil {
		log.Println(err)
		return nil, nil
	}
	ciphertext := make([]byte, len(keyPair.PubKey))
	mode := cipher.NewCBCEncrypter(block, iv)
	mode.CryptBlocks(ciphertext, keyPair.PubKey)

	temp := make([]byte, len(keyPair.PubKey))
	copy(temp, ciphertext)
	copy(ciphertext[8:16], temp[0:8])
	copy(ciphertext[24:], temp[8:16])
	copy(ciphertext[0:8], temp[16:24])
	copy(ciphertext[16:24], temp[24:])

	//2-3.hasing publickey...
	crc := sha256.Sum256(keyPair.PubKey)

	//2-4.Base58 encoding...
	allPkcrc := make([]byte, len(ciphertext)+len(crc[:5]))
	copy(allPkcrc, ciphertext)
	copy(allPkcrc[32:37], crc[:5])

	didSpecific := base58.Encode(allPkcrc)
	didStr += didSpecific
	holder.DID = didStr

	document := GenerateDIDDocument(*holder)
	/*
		이후 블록체인에 등록과정 필요
	*/

	return holder, document
}

func GenerateDIDDocument(holder model.DidInfo) *model.DocumentInfo {
	services := serviceSample(holder)
	newDocument := &model.DocumentInfo{
		Context:        []string{"https://www.w3.org/ns/did/v1"},
		Id:             holder.DID,
		Created:        util.GetCurrentDate(),
		Authentication: []string{fmt.Sprintf("%s#keys-1", holder.DID)},
		Service:        services.Service,
	}

	CreateDocumentJson(newDocument)
	return newDocument
}

func serviceSample(holder model.DidInfo) *model.DocumentInfo {
	result := &model.DocumentInfo{}

	Service1 := &model.Service{}
	Service1.Id = fmt.Sprintf("%s#EmployeeAuth", holder.DID)
	Service1.Type = "AuthenticateEmployee"
	Service1.ServiceEndpoint = "https://did.sample.com/employeeAuth/"

	Service2 := &model.Service{}
	Service2.Id = fmt.Sprintf("%s#EmployeeList", holder.DID)
	Service2.Type = "employeeList"
	Service2.ServiceEndpoint = "https://did.sample.com/employeeList/"

	result.Service = append(result.Service, *Service1)
	result.Service = append(result.Service, *Service2)

	return result
}

// func CreateDocumentJson(docu *model.DocumentInfo) {
func CreateDocumentJson(data interface{}) {

	b, err := json.Marshal(data)
	if err != nil {
		fmt.Println(err)
	}

	var out bytes.Buffer
	json.Indent(&out, b, "", " ")

	err = ioutil.WriteFile("./DIDDocument.json", out.Bytes(), os.FileMode(0644)) // articles.json 파일에 JSON 문서 저장
	if err != nil {
		fmt.Println(err)
	}
}
